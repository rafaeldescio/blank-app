import streamlit as st
import pandas as pd
import numpy as np
import pickle
import joblib
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow import keras
import warnings
warnings.filterwarnings('ignore')


# Lib para manipula√ß√£o de dados
import pandas as pd

# Libs da Scikit-Learn
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score

# Integrando Keras e Scikit-Learn 
from scikeras.wrappers import KerasClassifier
# Criando arquitetura da rede neural
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout

import pandas as pd
#import tensorflow as tf
import sklearn
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from tensorflow.keras.models import load_model
from utils import DATABASE_DIR, MODEL_DIR

df = pd.read_csv(DATABASE_DIR / 'Comun_Ocorrencias_final.csv', 
                 on_bad_lines='skip',
                 encoding='utf-8',      # Definir o encoding que tentar√° abrir o arquivo
                 sep=',',               # Delimitador (padr√£o √© v√≠rgula)
                 header=0,              # Primeira linha como cabe√ßalho
                 #index_col=0            # Usar a primeira coluna como √≠ndice
                 )       

df = df.drop('Data', axis=1)
df = df.drop('Relato da Ocorr√™ncia', axis=1)
df = df.drop('A√ß√µes Imediatas', axis=1)
df = df.drop('A√ß√£o Posterior/Programada', axis=1)
df = df.drop('Criado', axis=1)
df = df.drop('Criado por', axis=1)
df = df.drop('QTD Plano de A√ß√£o', axis=1)


classificador = load_model(MODEL_DIR / "modelo_situacao_reporte.keras")

print('classificador carregado:' + str(classificador))


# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Predi√ß√£o de Reportes",
    page_icon="üîç",
    layout="wide"
)

# T√≠tulo da aplica√ß√£o
st.title("üîç Sistema de Predi√ß√£o de Reportes")
st.markdown("Sistema para predi√ß√£o de reportes utilizando modelos de Deep Learning")
st.markdown("---")

# Sidebar para carregar modelo
# st.sidebar.header("ü§ñ Carregamento do Modelo")

@st.cache_resource
def load_model(model_file):
    """Carrega o modelo de deep learning"""
    try:
        if model_file.name.endswith('.h5') or model_file.name.endswith('.keras'):
            # Para modelos TensorFlow/Keras, salva temporariamente o arquivo
            import tempfile
            import os
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.h5') as tmp_file:
                tmp_file.write(model_file.read())
                tmp_file_path = tmp_file.name
            
            model = keras.models.load_model(tmp_file_path)
            os.unlink(tmp_file_path)  # Remove arquivo tempor√°rio
            st.sidebar.success("‚úÖ Modelo TensorFlow/Keras carregado!")
            
        elif model_file.name.endswith('.pkl'):
            # Para arquivos pickle, carrega diretamente do buffer
            model = pickle.load(model_file)
            st.sidebar.success("‚úÖ Modelo Pickle carregado!")
            
        elif model_file.name.endswith('.joblib'):
            # Para arquivos joblib, carrega diretamente do buffer  
            model = joblib.load(model_file)
            st.sidebar.success("‚úÖ Modelo Joblib carregado!")
            
        else:
            st.sidebar.error("‚ùå Formato n√£o suportado. Use .h5, .keras, .pkl ou .joblib")
            return None
            
        return model
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao carregar modelo: {str(e)}")
        return None

# Upload do modelo
#uploaded_model = st.sidebar.file_uploader(
#    "Selecione o arquivo do modelo:",
#    type=['h5', 'keras', 'pkl', 'joblib'],
#    help="Formatos suportados: .h5, .keras, .pkl, .joblib"
#)



#model = None
#if uploaded_model is not None:
#    model = load_model(uploaded_model)

model = classificador

# Op√ß√£o para carregar pr√©-processadores
#st.sidebar.markdown("---")
#st.sidebar.header("üîß Pr√©-processadores (Opcional)")
#uploaded_preprocessors = st.sidebar.file_uploader(
#    "Selecione o arquivo de pr√©-processadores:",
#    type=['pkl', 'joblib'],
#    help="Arquivo contendo encoders, scalers e outros pr√©-processadores"
#)

#preprocessors = None
#if uploaded_preprocessors is not None:
#    try:
#        if uploaded_preprocessors.name.endswith('.pkl'):
#            preprocessors = pickle.load(uploaded_preprocessors)
#        elif uploaded_preprocessors.name.endswith('.joblib'):
#            preprocessors = joblib.load(uploaded_preprocessors)
#        st.sidebar.success("‚úÖ Pr√©-processadores carregados!")
#    except Exception as e:
#        st.sidebar.error(f"‚ùå Erro ao carregar pr√©-processadores: {str(e)}")

def main(st):
    # Interface principal para preenchimento dos campos
    st.header("üìù Preenchimento dos Dados para Predi√ß√£o")

    if model is None:
        st.warning("‚ö†Ô∏è Por favor, carregue um modelo na barra lateral para continuar.")
        st.stop()

    # Inicializar session_state se necess√°rio
    if 'form_data' not in st.session_state:
        st.session_state.form_data = {}

    # Bot√µes para carregar dados automaticamente
    st.subheader("üöÄ Preenchimento Autom√°tico")
    col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 2])

    with col_btn1:
        if st.button("üìã N√£o Report√°vel", key="btn_nao_reportavel_main", use_container_width=True):
            st.session_state.form_data = {
                'Unidade': 'Cama√ßari',
                'Empresa': 'Cibra',
                'Tipo Funcion√°rio': 'Pr√≥prio',
                'Setor Ocorr√™ncia': 'Opera√ß√£o',
                'Turno': 'Turno C',
                'Cargo': 'N√£o aplic√°vel',
                '√Årea': 'Granula√ß√£o',
                'Local': 'Caldeira',
                'Parte do Corpo Atingida': 'N√£o Aplic√°vel',
                'Categoria do Risco': 'N√£o informado',
                'Acidente': 'NIT - N√£o Impacta Taxa',
                'Agente Causador': 'N√£o informado',
                'Sexo': 'Feminino',
                'Tempo de empresa': 'N√£o informado',
                'Tipo de Acidente': 'Acidente com Dano Material',
                'Motivo': 'N√£o informado',
                'Ger√™ncia': 'N√£o informado',
                'Situa√ß√£o Reporte': 'N√£o Report√°vel',
                'Categoria': 'N√£o informado',
                'Dano': 'N√£o informado',
                'Afastado': 'N√£o informado',
                'Potencial Acidente': 'N√£o informado',
                'Outra Empresa': 'N√£o informado'
            }
            st.success("‚úÖ Dados 'N√£o Report√°vel' carregados automaticamente!")
            st.rerun()

    with col_btn2:
        if st.button("üìã Report√°vel",  key="btn_reportavel_main", use_container_width=True):
            st.session_state.form_data = {
                'Unidade': 'Sinop',
                'Empresa': 'Armac',
                'Tipo Funcion√°rio': 'Terceiro',
                'Setor Ocorr√™ncia': 'Opera√ß√£o',
                'Turno': 'Turno C',
                'Cargo': 'Operador de empilhadeira',
                '√Årea': 'Linha de enlonamento',
                'Local': 'Expedi√ß√£o',
                'Parte do Corpo Atingida': 'N√£o Aplic√°vel',
                'Categoria do Risco': 'Equipamentos M√≥veis e Ve√≠culos',
                'Acidente': 'NIT - N√£o Impacta Taxa',
                'Agente Causador': 'Batida contra',
                'Sexo': 'Masculino',
                'Tempo de empresa': '0 a 3 Meses',
                'Tipo de Acidente': 'Acidente com Dano Material',
                'Motivo': 'Condi√ß√£o',
                'Ger√™ncia': 'Opera√ß√£o',
                'Situa√ß√£o Reporte': 'Report√°vel',
                'Categoria': 'Leve',
                'Dano': 'Leve',
                'Afastado': 'N√£o',
                'Potencial Acidente': 'M√©dio',
                'Outra Empresa': 'N√£o informado'
            }
            st.success("‚úÖ Dados 'Report√°vel' carregados automaticamente!")
            st.rerun()

    with col_btn3:
        if st.button("üóëÔ∏è Limpar Campos", use_container_width=True):
            st.session_state.form_data = {}
            st.success("‚úÖ Campos limpos!")
            st.rerun()

    st.markdown("---")

    # Criar formul√°rio para os campos
    with st.form("prediction_form"):
        # Organizar campos em colunas
        col1, col2, col3 = st.columns(3)
        
        # Dicion√°rio para armazenar os valores
        data = {}
        
        with col1:
            st.subheader("üë• Dados Pessoais e Funcionais")
            data['Unidade'] = st.text_input("Unidade", value=st.session_state.form_data.get('Unidade', ''))
            data['Empresa'] = st.text_input("Empresa", value=st.session_state.form_data.get('Empresa', ''))
            data['Tipo Funcion√°rio'] = st.text_input("Tipo Funcion√°rio", value=st.session_state.form_data.get('Tipo Funcion√°rio', ''))
            data['Cargo'] = st.text_input("Cargo", value=st.session_state.form_data.get('Cargo', ''))
            
            # Campo Sexo com op√ß√µes predefinidas
            sexo_options = ["", "Masculino", "Feminino"]
            sexo_default = st.session_state.form_data.get('Sexo', '')
            if sexo_default in sexo_options:
                sexo_index = sexo_options.index(sexo_default)
            else:
                sexo_index = 0
            data['Sexo'] = st.selectbox("Sexo", options=sexo_options, index=sexo_index)
            
            data['Tempo de empresa'] = st.text_input("Tempo de empresa", value=st.session_state.form_data.get('Tempo de empresa', ''))
            data['Ger√™ncia'] = st.text_input("Ger√™ncia", value=st.session_state.form_data.get('Ger√™ncia', ''))
            
            # Campo Outra Empresa
            outra_empresa_options = ["", "Sim", "N√£o", "N√£o informado"]
            outra_empresa_default = st.session_state.form_data.get('Outra Empresa', '')
            if outra_empresa_default in outra_empresa_options:
                outra_empresa_index = outra_empresa_options.index(outra_empresa_default)
            else:
                outra_empresa_index = 0
            data['Outra Empresa'] = st.selectbox("Outra Empresa", options=outra_empresa_options, index=outra_empresa_index)
        
        with col2:
            st.subheader("üè≠ Dados do Local e Ocorr√™ncia")
            data['Setor Ocorr√™ncia'] = st.text_input("Setor Ocorr√™ncia", value=st.session_state.form_data.get('Setor Ocorr√™ncia', ''))
            data['Turno'] = st.text_input("Turno", value=st.session_state.form_data.get('Turno', ''))
            data['√Årea'] = st.text_input("√Årea", value=st.session_state.form_data.get('√Årea', ''))
            data['Local'] = st.text_input("Local", value=st.session_state.form_data.get('Local', ''))
            data['Parte do Corpo Atingida'] = st.text_input("Parte do Corpo Atingida", value=st.session_state.form_data.get('Parte do Corpo Atingida', ''))
            data['Categoria do Risco'] = st.text_input("Categoria do Risco", value=st.session_state.form_data.get('Categoria do Risco', ''))
            data['Agente Causador'] = st.text_input("Agente Causador", value=st.session_state.form_data.get('Agente Causador', ''))
            data['Tipo de Acidente'] = st.text_input("Tipo de Acidente", value=st.session_state.form_data.get('Tipo de Acidente', ''))
        
        with col3:
            st.subheader("üìä Classifica√ß√£o e Status")
            data['Acidente'] = st.text_input("Acidente", value=st.session_state.form_data.get('Acidente', ''))
            data['Motivo'] = st.text_input("Motivo", value=st.session_state.form_data.get('Motivo', ''))
            data['Situa√ß√£o Reporte'] = st.text_input("Situa√ß√£o Reporte", value=st.session_state.form_data.get('Situa√ß√£o Reporte', ''))
            data['Categoria'] = st.text_input("Categoria", value=st.session_state.form_data.get('Categoria', ''))
            data['Dano'] = st.text_input("Dano", value=st.session_state.form_data.get('Dano', ''))
            
            # Campo Afastado
            afastado_options = ["", "Sim", "N√£o", "N√£o informado"]
            afastado_default = st.session_state.form_data.get('Afastado', '')
            if afastado_default in afastado_options:
                afastado_index = afastado_options.index(afastado_default)
            else:
                afastado_index = 0
            data['Afastado'] = st.selectbox("Afastado", options=afastado_options, index=afastado_index)
            
            data['Potencial Acidente'] = st.text_input("Potencial Acidente", value=st.session_state.form_data.get('Potencial Acidente', ''))
        
        # Bot√£o para fazer predi√ß√£o
        submitted = st.form_submit_button("üöÄ Fazer Predi√ß√£o", use_container_width=True)

        def checarSituacaoReporte(pred):
            if(pred==1):
                return 'Report√°vel'
            elif(pred==0):
                return 'N√£o Report√°vel'
            else:
                return 'Indefinido'
            
        def reordenar_dict(dados, ordem):
            """
            Reordena um dicion√°rio seguindo a ordem especificada.
            Os atributos que n√£o estiverem na lista de ordem ser√£o colocados no final.
            """
            return {chave: dados.get(chave) for chave in ordem if chave in dados} | {
                k: v for k, v in dados.items() if k not in ordem
            }
        
        # Ordem desejada (conforme seu exemplo de Sinop/Armac)
        ordem = [
            'Unidade', 'Empresa', 'Tipo Funcion√°rio', 'Setor Ocorr√™ncia', 'Turno',
            'Cargo', '√Årea', 'Local', 'Parte do Corpo Atingida', 'Categoria do Risco',
            'Acidente', 'Agente Causador', 'Sexo', 'Tempo de empresa', 'Tipo de Acidente',
            'Motivo', 'Ger√™ncia', 'Categoria', 'Dano', 'Afastado', 'Potencial Acidente',
            'Outra Empresa'
        ]
        
        if submitted:
            # Verificar se todos os campos obrigat√≥rios foram preenchidos
            campos_vazios = [campo for campo, valor in data.items() if valor == "" or valor is None]
            
            if campos_vazios:
                st.error(f"‚ö†Ô∏è Por favor, preencha os seguintes campos: {', '.join(campos_vazios)}")
            else:
                # Preparar dados para predi√ß√£o
                try:
                    # Converter para DataFrame
                    df_input = pd.DataFrame([data])

                    targetIndex = df.columns.get_loc("Situa√ß√£o Reporte")
                    print(targetIndex)
                    X = df.drop(df.columns[targetIndex], axis=1) # todas as colunas, menos o alvo
                    
                    onehotencoder_X = ColumnTransformer(
                        transformers=[
                            ("OneHot", OneHotEncoder(handle_unknown='ignore'), 
                            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])], remainder='passthrough')
                    
                    X = onehotencoder_X.fit_transform(X)

                    print('----------------------------------------')
                    data.pop("Situa√ß√£o Reporte", None)  # None evita erro caso a chave n√£o exista
                    data = reordenar_dict(data, ordem)
                    print(data)
                    print('----------------------------------------')

                    data = list(data.values())
                    data = np.array([data]) 

                    novo_transformado = onehotencoder_X.transform(data)
                    print(novo_transformado)
                    pred_proba = classificador.predict(novo_transformado)
                    pred_classe = np.argmax(pred_proba, axis=1)
                    print("Classe prevista:", checarSituacaoReporte(pred_classe[0]))
                    
                    st.success("‚úÖ Predi√ß√£o: "+str(checarSituacaoReporte(pred_classe[0])))
                    #st.success("‚úÖ Dados coletados com sucesso!")

                
                except Exception as e:
                    st.error(f"‚ùå Erro ao processar dados: {str(e)}")

    # Informa√ß√µes adicionais na sidebar
    st.sidebar.markdown("---")
    st.sidebar.header("‚ÑπÔ∏è Informa√ß√µes")
    st.sidebar.info("""
    **Campos Obrigat√≥rios:**
    - Todos os 23 campos devem ser preenchidos
    - Tempo de empresa deve ser num√©rico
    - Campos Sim/N√£o t√™m sele√ß√£o predefinida

    **Formatos de Modelo Suportados:**
    - TensorFlow/Keras (.h5, .keras)
    - Scikit-learn (.pkl, .joblib)
    - Modelos personalizados (.pkl)
    """)

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        Sistema de Predi√ß√£o de Reportes | Desenvolvido com Streamlit
    </div>
    """, unsafe_allow_html=True)
    st.markdown("**Desenvolvedores: Clayton Kossoski, Endi Danila de Souza da Silva, Kokouvi Hola Kanyi Kodjovi**")